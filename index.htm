
<!DOCTYPE html>
<html lang="en" class="noVNC_loading">
<head>

    <!--
    noVNC example: simple example using default UI
    Copyright (C) 2019 The noVNC authors
    noVNC is licensed under the MPL 2.0 (see LICENSE.txt)
    This file is licensed under the 2-Clause BSD license (see LICENSE.txt).

    Connect parameters are provided in query string:
        http://example.com/?host=HOST&port=PORT&encrypt=1
    or the fragment:
        http://example.com/#host=HOST&port=PORT&encrypt=1
    -->
    <title>noVNC</title>

    <link rel="icon" type="image/x-icon" href="app/images/icons/novnc.ico">
    <meta name="theme-color" content="#313131">

    <!-- Apple iOS Safari settings -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">

    <!-- @2x -->
    <link rel="apple-touch-icon" sizes="40x40" type="image/png" href="app/images/icons/novnc-ios-40.png">
    <link rel="apple-touch-icon" sizes="58x58" type="image/png" href="app/images/icons/novnc-ios-58.png">
    <link rel="apple-touch-icon" sizes="80x80" type="image/png" href="app/images/icons/novnc-ios-80.png">
    <link rel="apple-touch-icon" sizes="120x120" type="image/png" href="app/images/icons/novnc-ios-120.png">
    <link rel="apple-touch-icon" sizes="152x152" type="image/png" href="app/images/icons/novnc-ios-152.png">
    <link rel="apple-touch-icon" sizes="167x167" type="image/png" href="app/images/icons/novnc-ios-167.png">
    <!-- @3x -->
    <link rel="apple-touch-icon" sizes="60x60" type="image/png" href="app/images/icons/novnc-ios-60.png">
    <link rel="apple-touch-icon" sizes="87x87" type="image/png" href="app/images/icons/novnc-ios-87.png">
    <link rel="apple-touch-icon" sizes="120x120" type="image/png" href="app/images/icons/novnc-ios-120.png">
    <link rel="apple-touch-icon" sizes="180x180" type="image/png" href="app/images/icons/novnc-ios-180.png">

    <!-- Stylesheets -->
    <link rel="stylesheet" href="app/styles/constants.css">
    <link rel="stylesheet" href="app/styles/base.css">
    <link rel="stylesheet" href="app/styles/input.css">

    <!-- Images that will later appear via CSS -->
    <link rel="preload" as="image" href="app/images/info.svg">
    <link rel="preload" as="image" href="app/images/error.svg">
    <link rel="preload" as="image" href="app/images/warning.svg">

    <script type="module" crossorigin="anonymous" src="app/error-handler.js"></script>

    <script type="module">
        import UI from "./app/ui.js";
        import * as Log from './core/util/logging.js';

        let response;

        let defaults = {};
        let mandatory = {};

        // Default settings will be loaded from defaults.json. Mandatory
        // settings will be loaded from mandatory.json, which the user
        // cannot change.

        try {
            response = await fetch('./defaults.json');
            if (!response.ok) {
                throw Error("" + response.status + " " + response.statusText);
            }

            defaults = await response.json();
        } catch (err) {
            Log.Error("Couldn't fetch defaults.json: " + err);
        }

        try {
            response = await fetch('./mandatory.json');
            if (!response.ok) {
                throw Error("" + response.status + " " + response.statusText);
            }

            mandatory = await response.json();
        } catch (err) {
            Log.Error("Couldn't fetch mandatory.json: " + err);
        }

        // You can also override any defaults you need here:
        //
        // defaults['host'] = 'vnc.example.com';

        // Or force a specific setting, preventing the user from
        // changing it:
        //
        // mandatory['view_only'] = true;

        // See docs/EMBEDDING.md for a list of possible settings.

        UI.start({ settings: { defaults: defaults,
                               mandatory: mandatory } });
    </script>
</head>

<body>

    <div id="noVNC_fallback_error" class="noVNC_center">
        <div>
            <div>noVNC encountered an error:</div>
            <br>
            <div id="noVNC_fallback_errormsg"></div>
        </div>
    </div>

    <!-- noVNC control bar -->
    <div id="noVNC_control_bar_anchor" class="noVNC_vcenter">

        <div id="noVNC_control_bar">
            <div id="noVNC_control_bar_handle" title="Hide/Show the control bar"><div></div></div>

            <div class="noVNC_scroll">

            <h1 class="noVNC_logo" translate="no"><span>no</span><br>VNC</h1>

            <hr>

            <!-- Drag/Pan the viewport -->
            <input type="image" alt="Drag" src="app/images/drag.svg"
                id="noVNC_view_drag_button" class="noVNC_button noVNC_hidden"
                title="Move/Drag viewport">

            <!--noVNC touch device only buttons-->
            <div id="noVNC_mobile_buttons">
                <input type="image" alt="Keyboard" src="app/images/keyboard.svg"
                    id="noVNC_keyboard_button" class="noVNC_button" title="Show keyboard">
            </div>

            <!-- Extra manual keys -->
            <input type="image" alt="Extra keys" src="app/images/toggleextrakeys.svg"
                id="noVNC_toggle_extra_keys_button" class="noVNC_button"
                title="Show extra keys">
            <div class="noVNC_vcenter">
            <div id="noVNC_modifiers" class="noVNC_panel">
                <input type="image" alt="Ctrl" src="app/images/ctrl.svg"
                    id="noVNC_toggle_ctrl_button" class="noVNC_button"
                    title="Toggle Ctrl">
                <input type="image" alt="Alt" src="app/images/alt.svg"
                    id="noVNC_toggle_alt_button" class="noVNC_button"
                    title="Toggle Alt">
                <input type="image" alt="Windows" src="app/images/windows.svg"
                    id="noVNC_toggle_windows_button" class="noVNC_button"
                    title="Toggle Windows">
                <input type="image" alt="Tab" src="app/images/tab.svg"
                    id="noVNC_send_tab_button" class="noVNC_button"
                    title="Send Tab">
                <input type="image" alt="Esc" src="app/images/esc.svg"
                    id="noVNC_send_esc_button" class="noVNC_button"
                    title="Send Escape">
                <input type="image" alt="Ctrl+Alt+Del" src="app/images/ctrlaltdel.svg"
                    id="noVNC_send_ctrl_alt_del_button" class="noVNC_button"
                    title="Send Ctrl-Alt-Del">
            </div>
            </div>

            <!-- Shutdown/Reboot -->
            <input type="image" alt="Shutdown/Reboot" src="app/images/power.svg"
                id="noVNC_power_button" class="noVNC_button"
                title="Shutdown/Reboot...">
            <div class="noVNC_vcenter">
            <div id="noVNC_power" class="noVNC_panel">
                <div class="noVNC_heading">
                    <img alt="" src="app/images/power.svg"> Power
                </div>
                <input type="button" id="noVNC_shutdown_button" value="Shutdown">
                <input type="button" id="noVNC_reboot_button" value="Reboot">
                <input type="button" id="noVNC_reset_button" value="Reset">
            </div>
            </div>

	    <!-- Chatbot -->
            <input type="image" alt="Chatbot" src="app/images/chatbot.svg"
                id="nvchatFab" class="noVNC_button"
                title="Chatbot">

            <!-- Clipboard -->
            <input type="image" alt="Clipboard" src="app/images/clipboard.svg"
                id="noVNC_clipboard_button" class="noVNC_button"
                title="Clipboard">
            <div class="noVNC_vcenter">
            <div id="noVNC_clipboard" class="noVNC_panel">
                <div class="noVNC_heading">
                    <img alt="" src="app/images/clipboard.svg"> Clipboard
                </div>
                <p class="noVNC_subheading">
                    Edit clipboard content in the textarea below.
                </p>
                <textarea id="noVNC_clipboard_text" rows=5></textarea>
            </div>
            </div>

            <!-- Toggle fullscreen -->
            <input type="image" alt="Full screen" src="app/images/fullscreen.svg"
                id="noVNC_fullscreen_button" class="noVNC_button noVNC_hidden"
                title="Full screen">

            <!-- Settings -->
            <input type="image" alt="Settings" src="app/images/settings.svg"
                id="noVNC_settings_button" class="noVNC_button"
                title="Settings">
            <div class="noVNC_vcenter">
            <div id="noVNC_settings" class="noVNC_panel">
                <div class="noVNC_heading">
                    <img alt="" src="app/images/settings.svg"> Settings
                </div>
                <ul>
                    <li>
                        <label>
                            <input id="noVNC_setting_shared" type="checkbox"
                                   class="toggle">
                            Shared mode
                        </label>
                    </li>
                    <li>
                        <label>
                            <input id="noVNC_setting_view_only" type="checkbox"
                                   class="toggle">
                            View only
                        </label>
                    </li>
                    <li><hr></li>
                    <li>
                        <label>
                            <input id="noVNC_setting_view_clip" type="checkbox"
                                   class="toggle">
                            Clip to window
                        </label>
                    </li>
                    <li>
                        <label for="noVNC_setting_resize">Scaling mode:</label>
                        <select id="noVNC_setting_resize" name="vncResize">
                            <option value="off">None</option>
                            <option value="scale">Local scaling</option>
                            <option value="remote">Remote resizing</option>
                        </select>
                    </li>
                    <li><hr></li>
                    <li>
                        <div class="noVNC_expander">Advanced</div>
                        <div><ul>
                            <li>
                                <label for="noVNC_setting_quality">Quality:</label>
                                <input id="noVNC_setting_quality" type="range" min="0" max="9" value="6">
                            </li>
                            <li>
                                <label for="noVNC_setting_compression">Compression level:</label>
                                <input id="noVNC_setting_compression" type="range" min="0" max="9" value="2">
                            </li>
                            <li><hr></li>
                            <li>
                                <label for="noVNC_setting_repeaterID">Repeater ID:</label>
                                <input id="noVNC_setting_repeaterID" type="text" value="">
                            </li>
                            <li>
                                <div class="noVNC_expander">WebSocket</div>
                                <div><ul>
                                    <li>
                                        <label>
                                            <input id="noVNC_setting_encrypt" type="checkbox"
                                                   class="toggle">
                                            Encrypt
                                        </label>
                                    </li>
                                    <li>
                                        <label for="noVNC_setting_host">Host:</label>
                                        <input id="noVNC_setting_host">
                                    </li>
                                    <li>
                                        <label for="noVNC_setting_port">Port:</label>
                                        <input id="noVNC_setting_port" type="number">
                                    </li>
                                    <li>
                                        <label for="noVNC_setting_path">Path:</label>
                                        <input id="noVNC_setting_path" type="text" value="websockify">
                                    </li>
                                </ul></div>
                            </li>
                            <li><hr></li>
                            <li>
                                <label>
                                    <input id="noVNC_setting_reconnect" type="checkbox"
                                           class="toggle">
                                    Automatic reconnect
                                </label>
                            </li>
                            <li>
                                <label for="noVNC_setting_reconnect_delay">Reconnect delay (ms):</label>
                                <input id="noVNC_setting_reconnect_delay" type="number">
                            </li>
                            <li><hr></li>
                            <li>
                                <label>
                                    <input id="noVNC_setting_show_dot" type="checkbox"
                                           class="toggle">
                                    Show dot when no cursor
                                </label>
                            </li>
                            <li><hr></li>
                            <!-- Logging selection dropdown -->
                            <li>
                                <label>Logging:
                                    <select id="noVNC_setting_logging" name="vncLogging">
                                    </select>
                                </label>
                            </li>
                        </ul></div>
                    </li>
                    <li class="noVNC_version_separator"><hr></li>
                    <li class="noVNC_version_wrapper">
                        <span>Version:</span>
                        <span class="noVNC_version"></span>
                    </li>
                </ul>
            </div>
            </div>

            <!-- Connection controls -->
            <input type="image" alt="Disconnect" src="app/images/disconnect.svg"
                id="noVNC_disconnect_button" class="noVNC_button"
                title="Disconnect">

            </div>
        </div>

    </div> <!-- End of noVNC_control_bar -->

    <div id="noVNC_hint_anchor" class="noVNC_vcenter">
        <div id="noVNC_control_bar_hint">
        </div>
    </div>

    <!-- Status dialog -->
    <div id="noVNC_status"></div>

    <!-- Connect button -->
    <div class="noVNC_center">
        <div id="noVNC_connect_dlg">
            <p class="noVNC_logo" translate="no"><span>no</span>VNC</p>
            <div>
                <button id="noVNC_connect_button">
                    <img alt="" src="app/images/connect.svg"> Connect
                </button>
            </div>
        </div>
    </div>

    <!-- Server key verification dialog -->
    <div class="noVNC_center noVNC_connect_layer">
    <div id="noVNC_verify_server_dlg" class="noVNC_panel"><form>
        <div class="noVNC_heading">
            Server identity
        </div>
        <div>
            The server has provided the following identifying information:
        </div>
        <div id="noVNC_fingerprint_block">
            Fingerprint:
            <span id="noVNC_fingerprint"></span>
        </div>
        <div>
            Please verify that the information is correct and press
            "Approve". Otherwise press "Reject".
        </div>
        <div class="button_row">
            <input id="noVNC_approve_server_button" type="submit" value="Approve">
            <input id="noVNC_reject_server_button" type="button" value="Reject">
        </div>
    </form></div>
    </div>

    <!-- Password dialog -->
    <div class="noVNC_center noVNC_connect_layer">
    <div id="noVNC_credentials_dlg" class="noVNC_panel"><form>
        <div class="noVNC_heading">
            Credentials
        </div>
        <div id="noVNC_username_block">
            <label for="noVNC_username_input">Username:</label>
            <input id="noVNC_username_input">
        </div>
        <div id="noVNC_password_block">
            <label for="noVNC_password_input">Password:</label>
            <input id="noVNC_password_input" type="password">
        </div>
        <div class="button_row">
            <input id="noVNC_credentials_button" type="submit" value="Send credentials">
        </div>
    </form></div>
    </div>

    <!-- Transition screens -->
    <div id="noVNC_transition">
        <div id="noVNC_transition_text"></div>
        <div>
        <input type="button" id="noVNC_cancel_reconnect_button" value="Cancel">
        </div>
        <div class="noVNC_spinner"></div>
    </div>

    <!-- This is where the RFB elements will attach -->
    <div id="noVNC_container">
        <!-- Note that Google Chrome on Android doesn't respect any of these,
             html attributes which attempt to disable text suggestions on the
             on-screen keyboard. Let's hope Chrome implements the ime-mode
             style for example -->
        <textarea id="noVNC_keyboardinput" autocapitalize="off"
            autocomplete="off" spellcheck="false" tabindex="-1"></textarea>
    </div>

    <audio id="noVNC_bell">
        <source src="app/sounds/bell.oga" type="audio/ogg">
        <source src="app/sounds/bell.mp3" type="audio/mpeg">
    </audio>
<!-- ===== noVNC Floating Chat with Round Toggle Button (FAB) ===== -->
<style>
  :root {
    --nvchat-bg: #0b1220;
    --nvchat-panel: #121a2b;
    --nvchat-accent: #4f8cff;
    --nvchat-text: #e8efff;
    --nvchat-muted: #96a0b8;
    --nvchat-border: #24304a;
    --nvchat-shadow: 0 10px 30px rgba(0,0,0,0.35);
  }

  /* Tombol bulat (FAB) */
  .nvchat-fab {
    position: fixed;
    right: 20px; bottom: 20px;
    width: 56px; height: 56px;
    border-radius: 50%;
    background: var(--nvchat-accent);
    color: white;
    display: inline-flex; align-items: center; justify-content: center;
    border: none;
    box-shadow: 0 12px 28px rgba(0,0,0,.35);
    cursor: pointer;
    z-index: 100000;   /* di atas canvas noVNC */
    transition: transform .12s ease, box-shadow .12s ease;
  }
  .nvchat-fab:hover { transform: translateY(-1px); box-shadow: 0 14px 34px rgba(0,0,0,.38); }
  .nvchat-fab:active { transform: translateY(0); }

  /* Panel chat */
  .nvchat {
    position: fixed;
    right: 20px; bottom: 84px;          /* beri jarak dari FAB */
    width: 340px; height: 420px;        /* ukuran default */
    min-width: 260px; min-height: 260px;
    max-height: 80vh;
    font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Arial, "Apple Color Emoji","Segoe UI Emoji";
    color: var(--nvchat-text);
    background: var(--nvchat-panel);
    border: 1px solid var(--nvchat-border);
    border-radius: 14px;
    box-shadow: var(--nvchat-shadow);
    z-index: 99999;
    display: none;                       /* tersembunyi saat awal */
    flex-direction: column; overflow: hidden;

    resize: both;                        /* bisa di-resize */
  }
  .nvchat--open { display: flex; }       /* tampil saat open */

  .nvchat * { box-sizing: border-box; }
  .nvchat__header {
    display: flex; align-items: center; gap: 8px;
    padding: 10px 12px;
    background: linear-gradient(180deg, #15203a, #0f1830);
    cursor: move; user-select: none;
    border-bottom: 1px solid var(--nvchat-border);
  }
  .nvchat__dot { width: 8px; height: 8px; border-radius: 50%; background: #66d67a; box-shadow: 0 0 10px rgba(102,214,122,.6); }
  .nvchat__title { font-weight: 600; font-size: 13px; letter-spacing: .2px; }
  .nvchat__spacer { flex: 1; }
  .nvchat__btn {
    border: 0; background: transparent; color: var(--nvchat-muted);
    padding: 6px; border-radius: 8px; cursor: pointer;
  }
  .nvchat__btn:hover { color: var(--nvchat-text); background: rgba(79,140,255,0.12); }

  .nvchat__body {
    flex: 1 1 auto;
    display: flex; flex-direction: column; gap: 10px;
    padding: 12px; overflow-y: auto;
    background:
      radial-gradient(1200px 300px at 70% 120%, rgba(79,140,255,0.07), transparent 60%),
      radial-gradient(800px 200px at -10% -20%, rgba(79,140,255,0.05), transparent 55%),
      var(--nvchat-panel);
  }
  .nvchat__msg {
    display: inline-block; max-width: 86%; padding: 8px 10px;
    border: 1px solid var(--nvchat-border); border-radius: 10px; font-size: 12px; line-height: 1.35;
    word-wrap: break-word; white-space: pre-wrap;
  }
  .nvchat__msg--me { align-self: flex-end; background: rgba(79,140,255,0.15); border-color: rgba(79,140,255,0.35); }
  .nvchat__msg--bot { align-self: flex-start; background: #0c1323; }
  .nvchat__time { display:block; font-size: 10px; color: var(--nvchat-muted); margin-top: 4px; }

  .nvchat__input {
    display: grid; grid-template-columns: 1fr auto; gap: 8px;
    padding: 10px 12px; border-top: 1px solid var(--nvchat-border); background: #0d1527;
  }
  .nvchat__textarea {
    resize: none; height: 38px; padding: 8px 10px; border-radius: 10px;
    background: #0a1120; color: var(--nvchat-text);
    border: 1px solid var(--nvchat-border); outline: none; font-size: 13px;
  }
  .nvchat__send {
    padding: 0 12px; border-radius: 10px; border: 1px solid var(--nvchat-border);
    background: var(--nvchat-accent); color: white; font-weight: 600; font-size: 12px; cursor: pointer;
  }
  .nvchat__send:disabled { opacity: .6; cursor: not-allowed; }

  .nvchat--minimized .nvchat__body,
  .nvchat--minimized .nvchat__input { display: none; }
  .nvchat--minimized { height: auto; }

  /* Visual grip sudut kanan-bawah */
  .nvchat::after{
    content:"";
    position:absolute; right:6px; bottom:6px;
    width:14px; height:14px; opacity:.5;
    background:
      linear-gradient(135deg, transparent 8px, rgba(255,255,255,.2) 8px),
      linear-gradient(315deg, transparent 8px, rgba(255,255,255,.2) 8px);
    border-radius: 3px;
    pointer-events: none;
  }

  @media (max-width: 520px) {
    .nvchat-fab { right: 12px; bottom: 12px; }
    .nvchat { right: 12px; left: 12px; bottom: 76px; width: auto; }
  }
</style>

<!-- Panel Chat -->
<div class="nvchat" id="nvchat" aria-live="polite" aria-label="Chatbox">
  <div class="nvchat__header" id="nvchatHeader">
    <span class="nvchat__dot" aria-hidden="true"></span>
    <div class="nvchat__title">AI Agent</div>
    <div class="nvchat__spacer"></div>
    <button class="nvchat__btn" id="nvchatClear" title="Clear chat" aria-label="Clear">Clear</button>
  </div>

  <div class="nvchat__body" id="nvchatBody"></div>

  <div class="nvchat__input">
    <textarea id="nvchatTextarea" class="nvchat__textarea" placeholder="Tulis pesan..."></textarea>
    <button id="nvchatSend" class="nvchat__send">Kirim</button>
  </div>
</div>

<script>
(function(){
  const el = {
    fab: document.getElementById('nvchatFab'),
    root: document.getElementById('nvchat'),
    header: document.getElementById('nvchatHeader'),
    body: document.getElementById('nvchatBody'),
    ta: document.getElementById('nvchatTextarea'),
    send: document.getElementById('nvchatSend'),
    clear: document.getElementById('nvchatClear'),
  };

  // ---- Persist state
  const STORAGE_KEY = 'nvchat_fab_v1';
  function saveState(){
    const rect = el.root.getBoundingClientRect();
    const messages = [...el.body.querySelectorAll('.nvchat__msg')].map(m => ({
      html: m.innerHTML,
      isMe: m.classList.contains('nvchat__msg--me'),
    }));
    localStorage.setItem(STORAGE_KEY, JSON.stringify({
      open: el.root.classList.contains('nvchat--open'),
      minimized: el.root.classList.contains('nvchat--minimized'),
      width: el.root.style.width || rect.width + 'px',
      height: el.root.style.height || rect.height + 'px',
      left: el.root.style.left || '',
      top: el.root.style.top || '',
      right: el.root.style.right || '',
      bottom: el.root.style.bottom || '',
      messages
    }));
  }
  function loadState(){
    try{
      const s = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}');
      if(s.open) el.root.classList.add('nvchat--open');
      if(s.minimized) el.root.classList.add('nvchat--minimized');
      if(s.width)  el.root.style.width  = s.width;
      if(s.height) el.root.style.height = s.height;
      if(s.left || s.top){
        el.root.style.left = s.left || '';
        el.root.style.top = s.top || '';
        el.root.style.right = s.right || 'auto';
        el.root.style.bottom = s.bottom || 'auto';
      }
      if(Array.isArray(s.messages)){
        s.messages.forEach(m => addMsg(m.html, m.isMe, true));
      }
    }catch(e){}
  }

  // ---- Utilities
  function now(){
    const d = new Date();
    return d.toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'});
  }
  function addMsg(textOrHTML, isMe=false, isHTML=false){
    const b = document.createElement('div');
    b.className = 'nvchat__msg ' + (isMe ? 'nvchat__msg--me' : 'nvchat__msg--bot');
    if(isHTML) b.innerHTML = textOrHTML;
    else b.textContent = textOrHTML;
    const t = document.createElement('span');
    t.className = 'nvchat__time';
    t.textContent = now();
    b.appendChild(t);
    el.body.appendChild(b);
    el.body.scrollTop = el.body.scrollHeight;
  }

  // ---- Drag move (hindari saat resize)
  (function enableDrag(){
    let sx=0, sy=0, ox=0, oy=0, dragging=false;
    const onDown = (e)=>{
      const r = el.root.getBoundingClientRect();
      const evt = e.touches ? e.touches[0] : e;
      if (evt.clientX > r.right - 18 && evt.clientY > r.bottom - 18) return; // sudut resize
      dragging = true;
      sx = evt.clientX; sy = evt.clientY;
      const rect = el.root.getBoundingClientRect();
      ox = rect.left; oy = rect.top;
      e.preventDefault();
    };
    const onMove = (e)=>{
      if(!dragging) return;
      const evt = e.touches ? e.touches[0] : e;
      const dx = evt.clientX - sx;
      const dy = evt.clientY - sy;
      el.root.style.left = (ox + dx) + 'px';
      el.root.style.top = (oy + dy) + 'px';
      el.root.style.right = 'auto';
      el.root.style.bottom = 'auto';
    };
    const onUp = ()=>{ if(dragging){ dragging=false; saveState(); } };
    el.header.addEventListener('mousedown', onDown);
    el.header.addEventListener('touchstart', onDown, {passive:false});
    window.addEventListener('mousemove', onMove);
    window.addEventListener('touchmove', onMove, {passive:false});
    window.addEventListener('mouseup', onUp);
    window.addEventListener('touchend', onUp);
  })();

  // ---- Clear, toggle open
  el.clear.addEventListener('click', ()=>{
    el.body.innerHTML = '';
    saveState();
  });
  el.fab.addEventListener('click', ()=>{
    el.root.classList.toggle('nvchat--open');
    // Fokus textarea saat dibuka
    if (el.root.classList.contains('nvchat--open')) {
      setTimeout(()=> el.ta.focus(), 50);
    }
    saveState();
  });

  // ---- Stop propagation agar noVNC tidak menelan input
  ['keydown','keypress','keyup'].forEach(evt=>{
    el.ta.addEventListener(evt, (e)=> e.stopPropagation());
  });

  // ---- Kirim pesan ke backend
  async function sendMessage(){
    const text = el.ta.value.trim();
    if(!text) return;
    el.ta.value = '';
    addMsg(text, true);
    saveState();

    el.send.disabled = true;
    try{
      const res = await fetch('https://openrouter.ai/api/v1/chat/completions', {
        method: 'POST',
        headers: {'Content-Type':'application/json', 'Authorization': 'Bearer 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'},
	body: JSON.stringify({ messages: [ { role: "user", content: text } ], model: "qwen/qwen3-32b", stream: false })
      });
      if(!res.ok) throw new Error('HTTP '+res.status);
      const data = await res.json(); // { reply: "..." }
      addMsg(data.choices[0].message.content || '(Tidak ada balasan dari server)');
    } catch (err){
      addMsg('Gagal mengirim ke server: ' + err.message);
    } finally {
      el.send.disabled = false;
      saveState();
    }
  }
  el.send.addEventListener('click', sendMessage);
  el.ta.addEventListener('keydown', (e)=>{
    if(e.key === 'Enter' && !e.shiftKey){
      e.preventDefault();
      sendMessage();
    }
  });

  // ---- Simpan ukuran saat di-resize
  const ro = new ResizeObserver(()=> saveState());
  ro.observe(el.root);

  // ---- Load state + greet jika kosong
  loadState();
  if(!el.body.children.length){
    addMsg('Halo world!', false, true);
    saveState();
  }
})();
</script>
<!-- ===== /noVNC Chat + FAB ===== -->

 </body>
</html>
